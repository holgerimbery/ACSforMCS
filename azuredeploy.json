{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "title": "ACS for Microsoft Copilot Studio - Complete Deployment",
    "description": "Deploy Azure Communication Services for Microsoft Copilot Studio with all required resources including App Service, Key Vault, and Communication Services. This template creates a complete environment ready for Copilot Studio integration.",
    "author": "Holger Imbery",
    "github": "https://github.com/holgerimbery/ACSforMCS"
  },
  "parameters": {
    "projectName": {
      "type": "string",
      "defaultValue": "agentvoice",
      "minLength": 3,
      "maxLength": 15,
      "metadata": {
        "description": "Base name for all resources. A random 6-character suffix will be added (e.g., 'agentvoice' becomes 'app-agentvoicea1b2c3-prod'). Create your resource group with naming convention 'rg-{projectName}{suffix}-{environment}'. Use lowercase letters and numbers only."
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "prod",
      "allowedValues": [
        "dev",
        "test",
        "stage",
        "prod"
      ],
      "metadata": {
        "description": "Environment suffix for resource naming"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "eastus",
        "eastus2",
        "westus",
        "westus2",
        "westus3",
        "centralus",
        "northcentralus",
        "southcentralus",
        "westcentralus",
        "canadacentral",
        "canadaeast",
        "brazilsouth",
        "northeurope",
        "westeurope",
        "uksouth",
        "ukwest",
        "francecentral",
        "germanywestcentral",
        "switzerlandnorth",
        "norwayeast",
        "swedencentral",
        "australiaeast",
        "australiasoutheast",
        "southeastasia",
        "eastasia",
        "japaneast",
        "japanwest",
        "koreacentral",
        "southafricanorth",
        "centralindia",
        "southindia",
        "westindia",
        "uaenorth"
      ],
      "metadata": {
        "description": "Azure region for all resources. Choose a region close to your users for best performance."
      }
    },
    "appServicePlanSku": {
      "type": "string",
      "defaultValue": "B1",
      "allowedValues": [
        "F1",
        "D1",
        "B1",
        "B2",
        "B3",
        "S1",
        "S2",
        "S3",
        "P1v2",
        "P2v2",
        "P3v2",
        "P1v3",
        "P2v3",
        "P3v3"
      ],
      "metadata": {
        "description": "App Service Plan SKU. F1=Free (limited), D1=Shared (limited), B1=Basic (recommended for testing), S1=Standard (recommended for production), P1v3=Premium (high performance)"
      }
    },
    "communicationServicesSku": {
      "type": "string",
      "defaultValue": "F0",
      "allowedValues": [
        "F0",
        "S0"
      ],
      "metadata": {
        "description": "Communication Services pricing tier. F0=Free tier (limited usage), S0=Standard tier (pay-as-you-go)"
      }
    },
    "cognitiveServicesSku": {
      "type": "string",
      "defaultValue": "F0",
      "allowedValues": [
        "F0",
        "S0"
      ],
      "metadata": {
        "description": "Cognitive Services pricing tier for Speech Services. F0=Free tier (limited usage), S0=Standard tier (pay-as-you-go)"
      }
    },
    "userObjectId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Your Azure AD Object ID for Key Vault access. Leave empty to auto-detect from deployment context. Get your Object ID from: Azure Portal > Azure Active Directory > Users > [Your User] > Object ID"
      }
    },
    "resourceSuffix": {
      "type": "string",
      "defaultValue": "",
      "minLength": 0,
      "maxLength": 6,
      "metadata": {
        "description": "Optional 6-character suffix for resource names. Leave empty to auto-generate random suffix. Use lowercase letters and numbers only."
      }
    },
    "enableApplicationInsights": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Application Insights for monitoring and diagnostics"
      }
    },
    "enableBackup": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable automated backups for the App Service (requires Basic or higher SKU)"
      }
    },
    "agentPhoneNumber": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Phone number for the agent (optional). Enter here if you already have a direct routing number. If you plan to purchase a number directly from Microsoft, leave empty and configure later via scripts."
      }
    },
    "directLineSecret": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "DirectLine secret from Bot Framework (optional, can be configured later via scripts)"
      }
    },
    "healthCheckApiKey": {
      "type": "securestring",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "API key for health check endpoint (auto-generated if not provided)"
      }
    }
  },
  "variables": {
    "randomSuffix": "[toLower(substring(uniqueString(resourceGroup().id, deployment().name), 0, 6))]",
    "actualSuffix": "[if(empty(parameters('resourceSuffix')), variables('randomSuffix'), toLower(parameters('resourceSuffix')))]",
    "extendedProjectName": "[concat(parameters('projectName'), variables('actualSuffix'))]",
    "appServicePlanName": "[format('asp-{0}-{1}', variables('extendedProjectName'), parameters('environment'))]",
    "webAppName": "[format('app-{0}-{1}', variables('extendedProjectName'), parameters('environment'))]",
    "keyVaultName": "[format('kv-{0}-{1}', variables('extendedProjectName'), parameters('environment'))]",
    "communicationServicesName": "[format('acs-{0}-{1}', variables('extendedProjectName'), parameters('environment'))]",
    "cognitiveServicesName": "[format('cs-{0}-{1}', variables('extendedProjectName'), parameters('environment'))]",
    "applicationInsightsName": "[format('ai-{0}-{1}', variables('extendedProjectName'), parameters('environment'))]",
    "logAnalyticsWorkspaceName": "[format('law-{0}-{1}', variables('extendedProjectName'), parameters('environment'))]",
    "baseUriSecret": "[if(equals(parameters('environment'), 'prod'), 'BaseUri-Production', 'BaseUri-Development')]"
  },
  "resources": [
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2023-01-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('appServicePlanSku')]"
      },
      "kind": "app",
      "properties": {
        "reserved": false
      },
      "tags": {
        "Project": "ACSforMCS",
        "Environment": "[parameters('environment')]",
        "DeployedBy": "ARM Template"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2023-01-01",
      "name": "[variables('webAppName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "httpsOnly": true,
        "siteConfig": {
          "netFrameworkVersion": "v9.0",
          "metadata": [
            {
              "name": "CURRENT_STACK",
              "value": "dotnet"
            }
          ],
          "appSettings": [
            {
              "name": "ASPNETCORE_ENVIRONMENT",
              "value": "[if(equals(parameters('environment'), 'prod'), 'Production', 'Development')]"
            },
            {
              "name": "KeyVaultName",
              "value": "[variables('keyVaultName')]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[if(parameters('enableApplicationInsights'), reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).InstrumentationKey, '')]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[if(parameters('enableApplicationInsights'), reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).ConnectionString, '')]"
            }
          ]
        }
      },
      "tags": {
        "Project": "ACSforMCS",
        "Environment": "[parameters('environment')]",
        "DeployedBy": "ARM Template"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "enableRbacAuthorization": false,
        "accessPolicies": [],
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 7
      },
      "tags": {
        "Project": "ACSforMCS",
        "Environment": "[parameters('environment')]",
        "DeployedBy": "ARM Template"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/add', variables('keyVaultName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Web/sites', variables('webAppName'))]"
      ],
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('webAppName')), '2023-01-01', 'full').identity.principalId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          },
          {
            "condition": "[not(empty(parameters('userObjectId')))]",
            "tenantId": "[subscription().tenantId]",
            "objectId": "[if(empty(parameters('userObjectId')), guid(subscription().subscriptionId, resourceGroup().id), parameters('userObjectId'))]",
            "permissions": {
              "secrets": [
                "get",
                "list",
                "set",
                "delete"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('baseUriSecret'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', variables('keyVaultName'), 'add')]"
      ],
      "properties": {
        "value": "[format('https://{0}.azurewebsites.net', variables('webAppName'))]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/AcsConnectionString', variables('keyVaultName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', variables('keyVaultName'), 'add')]",
        "[resourceId('Microsoft.Communication/communicationServices', variables('communicationServicesName'))]"
      ],
      "properties": {
        "value": "[listkeys(resourceId('Microsoft.Communication/communicationServices', variables('communicationServicesName')), '2023-04-01').primaryConnectionString]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/CognitiveServiceEndpoint', variables('keyVaultName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', variables('keyVaultName'), 'add')]",
        "[resourceId('Microsoft.CognitiveServices/accounts', variables('cognitiveServicesName'))]"
      ],
      "properties": {
        "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('cognitiveServicesName'))).endpoint]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/HealthCheckApiKey', variables('keyVaultName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', variables('keyVaultName'), 'add')]"
      ],
      "properties": {
        "value": "[parameters('healthCheckApiKey')]"
      }
    },
    {
      "condition": "[not(empty(parameters('agentPhoneNumber')))]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/AgentPhoneNumber', variables('keyVaultName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', variables('keyVaultName'), 'add')]"
      ],
      "properties": {
        "value": "[parameters('agentPhoneNumber')]"
      }
    },
    {
      "condition": "[not(empty(parameters('directLineSecret')))]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/DirectLineSecret', variables('keyVaultName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', variables('keyVaultName'), 'add')]"
      ],
      "properties": {
        "value": "[parameters('directLineSecret')]"
      }
    },
    {
      "type": "Microsoft.Communication/communicationServices",
      "apiVersion": "2023-04-01",
      "name": "[variables('communicationServicesName')]",
      "location": "global",
      "properties": {
        "dataLocation": "United States"
      },
      "tags": {
        "Project": "ACSforMCS",
        "Environment": "[parameters('environment')]",
        "DeployedBy": "ARM Template"
      }
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2023-05-01",
      "name": "[variables('cognitiveServicesName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('cognitiveServicesSku')]"
      },
      "kind": "SpeechServices",
      "properties": {
        "apiProperties": {},
        "customSubDomainName": "[variables('cognitiveServicesName')]",
        "networkAcls": {
          "defaultAction": "Allow"
        },
        "publicNetworkAccess": "Enabled"
      },
      "tags": {
        "Project": "ACSforMCS",
        "Environment": "[parameters('environment')]",
        "DeployedBy": "ARM Template"
      }
    },
    {
      "condition": "[parameters('enableApplicationInsights')]",
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2023-09-01",
      "name": "[variables('logAnalyticsWorkspaceName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30
      },
      "tags": {
        "Project": "ACSforMCS",
        "Environment": "[parameters('environment')]",
        "DeployedBy": "ARM Template"
      }
    },
    {
      "condition": "[parameters('enableApplicationInsights')]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
      ],
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[if(parameters('enableApplicationInsights'), resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName')), null())]"
      },
      "tags": {
        "Project": "ACSforMCS",
        "Environment": "[parameters('environment')]",
        "DeployedBy": "ARM Template"
      }
    }
  ],
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "expectedResourceGroupName": {
      "type": "string",
      "value": "[format('rg-{0}-{1}', variables('extendedProjectName'), parameters('environment'))]"
    },
    "actualSuffixUsed": {
      "type": "string",
      "value": "[variables('actualSuffix')]"
    },
    "suffixSource": {
      "type": "string",
      "value": "[if(empty(parameters('resourceSuffix')), 'Auto-generated random suffix', 'User-provided suffix')]"
    },
    "resourceGroupNamingNote": {
      "type": "string",
      "value": "[if(equals(resourceGroup().name, format('rg-{0}-{1}', variables('extendedProjectName'), parameters('environment'))), '✅ Resource group name follows the recommended naming convention', '⚠️ Resource group name differs from recommended convention')]"
    },
    "webAppName": {
      "type": "string",
      "value": "[variables('webAppName')]"
    },
    "webAppUrl": {
      "type": "string",
      "value": "[format('https://{0}.azurewebsites.net', variables('webAppName'))]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "communicationServicesName": {
      "type": "string",
      "value": "[variables('communicationServicesName')]"
    },
    "cognitiveServicesName": {
      "type": "string",
      "value": "[variables('cognitiveServicesName')]"
    },
    "applicationInsightsName": {
      "type": "string",
      "value": "[if(parameters('enableApplicationInsights'), variables('applicationInsightsName'), 'Not deployed')]"
    },
    "deploymentInstructions": {
      "type": "string",
      "value": "Deployment complete! Next steps: 1) Download the latest release package from GitHub, 2) Run setup-configuration.ps1 to configure remaining secrets, 3) Deploy your application code using deploy-application.ps1"
    },
    "namingConvention": {
      "type": "object",
      "value": {
        "resourceGroup": "[format('rg-{0}-{1}', variables('extendedProjectName'), parameters('environment'))]",
        "appService": "[variables('webAppName')]",
        "keyVault": "[variables('keyVaultName')]",
        "communicationServices": "[variables('communicationServicesName')]",
        "cognitiveServices": "[variables('cognitiveServicesName')]"
      }
    }
  }
}